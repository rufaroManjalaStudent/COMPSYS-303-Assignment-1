#resource "timing.h"
#hostcode-c "#include \"timing.h\""
@ClocksUseSD
// Putting all the regions together
scchart DDD_Pacemaker {
  input signal AS, VS
  output signal VRP, PVARP, URI, LRI
  output signal test
  output signal VP, AP // V_Paced
  host "int" AEI_TIME = `AEI_VALUE`
  host "int" VRP_TIME = `VRP_VALUE`
  host "int" AVI_TIME_OUT = `AVI_VALUE`
  host "int" PVARP_TIME = `PVARP_VALUE`
  host "int" URI_TIME= `URI_VALUE`
  host "int" LRI_TIME= `LRI_VALUE`

//#####################  
  region AEI { // DEADLINE: Pace the atrium if AEI_Time is exceeded.
    clock c = 0

    initial state init
    if  VS || VP go to WAR

    state WAR {
      entry do c = 0
    }

    if c >= AEI_TIME && AS == false && URI == false go to sendPulse_Atrial
    if c>= LRI_TIME  && AS == false go to sendPulse_Atrial

   if PVARP == false && (AS) go to waitForPulse

    state waitForPulse
    if VS||VP go to WAR

    state sendPulse_Atrial {
      entry do AP
    }
    go to waitForPulse
  }

//---------------------  
//#####################  
  region AVI {
    clock c = 0

    initial state init 
    if AS||AP go to WAR


    state WAR { // waitAndReset
      entry do c = 0
    }
     if VRP == false && (VS) go to waitForPulse
    if c >= AVI_TIME_OUT && VS == false && URI == false go to sendPulse_Ventricle
    if c>= LRI_TIME  && VS == false go to sendPulse_Ventricle

    
    state waitForPulse{
      
    }
    if AS||AP go to WAR
     

    state sendPulse_Ventricle {
      entry do VP
    }
    go to waitForPulse
  }

//---------------------  
//#####################  
  region VRP {
    clock c = 0

    initial state TimeOutAndReset {
      entry do c = 0
      during do VRP // During clock time is less than timeout, VRP == TRUE (No V pulse)
    }
    if c >= VRP_TIME go to waitForPulse

    state waitForPulse // Waits for pulse (V_Nat or V_Pace) detected, go to reset.
    if VS || VP go to TimeOutAndReset
  }

//#####################  
  region PVARP {
    clock c = 0

    initial state TimeOutAndReset {
      entry do c = 0
      during do PVARP // During clock time is less than timeout, VRP == TRUE (No V pulse)
    }
    if c >= PVARP_TIME go to waitForPulse

    state waitForPulse // Waits for pulse (V_Nat or V_Pace) detected, go to reset.
    if VS || VP go to TimeOutAndReset
  }

//---------------------  
//#####################   
  region URI {
    clock c = 0

    initial state WAR {
      during do URI
       entry do c = 0
    }
    if c >= URI_TIME || (VS || VP)  go to Reset

    state Reset {
     // entry do c = 0
    }
    if VS|| VP go to WAR
  }

////--------------------- 
//##################### 
  region LRI {
    clock c = 0

    initial state WAR {
      entry do c = 0
      during do LRI
    }
    if c >= LRI_TIME || (VS || VP) go to Reset

    state Reset {
      //entry do c = 0
    }
    if VS|| VP go to WAR
  }
//--------------------- 
}